name: .NET CI + Docker

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]   # e.g. v1.2.3
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write     # needed to push to GHCR
  id-token: write

env:
  DOTNET_VERSION: "8.0.x"      # adjust if you need 9.0, etc.
  CONFIGURATION: Release
  # If your Dockerfile isn't at repo root, change CONTEXT/DOCKERFILE accordingly.
  CONTEXT: .
  DOCKERFILE: ./Dockerfile

jobs:
  test:
    name: Build & Test (.NET)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ env.DOTNET_VERSION }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-${{ env.DOTNET_VERSION }}-

      - name: Restore
        run: |
          if compgen -G "*.sln" > /dev/null; then
            dotnet restore
          else
            # Fallback: restore all projects
            find . -name "*.csproj" -print0 | xargs -0 -n1 dotnet restore
          fi

      - name: Build
        run: |
          if compgen -G "*.sln" > /dev/null; then
            dotnet build --no-restore -c $CONFIGURATION
          else
            find . -name "*.csproj" -print0 | xargs -0 -n1 dotnet build --no-restore -c $CONFIGURATION
          fi

      - name: Test
        run: |
          if ls **/*Tests.csproj 1> /dev/null 2>&1; then
            find . -name "*Tests.csproj" -print0 | xargs -0 -n1 dotnet test --no-build -c $CONFIGURATION --logger "trx;LogFileName=test_results.trx"
          else
            echo "No *Tests.csproj found â€” skipping test step."
          fi

  docker:
    name: Build & Push Docker (GHCR)
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image name (lowercased)
        run: |
          echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          # Tags:
          # - main branch     -> :latest and :main
          # - tags vX.Y.Z     -> :vX.Y.Z
          # - fallback SHA    -> :sha-<short>
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          # Uncomment the next line to build multi-arch (slower):
          # platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
