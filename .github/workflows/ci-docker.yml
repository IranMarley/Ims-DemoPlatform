name: .NET CI + Multi Docker (no push)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  DOTNET_VERSION: "9.0.x"
  CONFIGURATION: Release
  SOLUTION_FILE: ./Ims.DemoPlatform.sln

jobs:
  test:
    name: Build & Test (.NET solution)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET (global.json)
        if: ${{ hashFiles('global.json') != '' }}
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Setup .NET (fallback)
        if: ${{ hashFiles('global.json') == '' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: |
            **/*.csproj
            global.json

      - name: Restore (solution)
        run: dotnet restore "$SOLUTION_FILE"

      - name: Build (solution)
        run: dotnet build "$SOLUTION_FILE" --no-restore -c "$CONFIGURATION"

      - name: Test (solution if tests exist)
        shell: bash
        run: |
          if find . -name "*Tests.csproj" -print -quit | grep -q .; then
            dotnet test "$SOLUTION_FILE" --no-build -c "$CONFIGURATION" --logger "trx;LogFileName=tests.trx"
          else
            echo "No *Tests.csproj found â€” skipping test step."
          fi

      - name: Upload test results (TRX)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/TestResults/*.trx

  discover-dockerfiles:
    name: Discover Dockerfiles (under ./src)
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        shell: bash
        run: |
          set -euo pipefail
          mapfile -d '' -t files < <(find ./src -type f -name 'Dockerfile' -print0)
          if [ ${#files[@]} -eq 0 ]; then
            echo 'matrix=[]' >> "$GITHUB_OUTPUT"
            exit 0
          fi
          entries=()
          for f in "${files[@]}"; do
            # Make dockerfile path relative to repo root (include 'src/')
            rel="${f#./}"  # e.g. src/Ims.DemoPlatform.Identity.API/Dockerfile
            entries+=("{\"dockerfile\":\"${rel}\"}")
          done
          json="[$(IFS=,; echo "${entries[*]}")]"
          echo "matrix=$json" >> "$GITHUB_OUTPUT"

  docker-build:
    name: Docker build (validate all projects)
    needs: [ test, discover-dockerfiles ]
    if: ${{ needs.discover-dockerfiles.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest
    env:
      BUILDKIT_PROGRESS: plain
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.discover-dockerfiles.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (no push) [context ./src]
        uses: docker/build-push-action@v6
        with:
          context: ./src
          file: ${{ matrix.dockerfile }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
